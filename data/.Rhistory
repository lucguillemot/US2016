thisstate.spreaded
}
# IOWA missing from Politico data
states <- c("NH", "SC", "NV", "AL", "AK", "AR", "GA", "MA", "MN", "OK", "TN", "TX", "VT", "VA", "KS", "KY", "LA", "ME", "HI", "ID", "MI", "MS", "DC", "FL", "IL", "MO", "NC", "OH", "AZ", "UT")
# Get States data (creates a dataframe for each States with data)
for (i in 1:length(states)) {
this <- states[i]
assign(this, parse_xml_states(states[i]))
print(states[i]) # Check if States is ok
}
# Calculates totals // NOT WORKING !!
#st.sp.cv <- japply(thisstate.spreaded, which(sapply(thisstate.spreaded, class)=="character"), as.numeric )
#st <- thisstate.spreaded %>% mutate(sum = rowSums(.[2:12]))
# Bind States's data
# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns
st <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)
#st.cl <- st %>% select(fip, as.numeric(H.Clinton))
# find the winner
## for each row, find the index of the column with max value
### for the dems
dems <- names(st[2:3])
reps <- names(st[4:7])
st$maxdems <- as.numeric(apply(st[2:3], 1, which.max))
st$maxreps <- as.numeric(apply(st[4:7], 1, which.max))
st <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value
for (j in 1:length(st$fip)) {
# get the max value (the number of votes obtained by the winner)
st$winnerdem_votes[j] <- as.numeric(unlist(st[j,st$indexdems[j]]))
st$winnerrep_votes[j] <- as.numeric(unlist(st[j,st$indexreps[j]]))
# get the name of the winner
st$winnerdem <- as.character(dems[st$maxdems])
st$winnerrep <- as.character(reps[st$maxreps])
}
# Bind States's data
# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns
st <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)
#st.cl <- st %>% select(fip, as.numeric(H.Clinton))
# find the winner
## for each row, find the index of the column with max value
### for the dems
dems <- names(st[2:3])
reps <- names(st[4:7])
st$maxdems <- as.numeric(apply(st[2:3], 1, which.max))
st$maxreps <- as.numeric(apply(st[4:7], 1, which.max))
st <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value
for (j in 1:length(st$fip)) {
# get the max value (the number of votes obtained by the winner)
#st$winnerdem_votes[j] <- as.numeric(st[j,st$indexdems[j]])
#st$winnerrep_votes[j] <- as.numeric(st[j,st$indexreps[j]])
# get the name of the winner
st$winnerdem <- as.character(dems[st$maxdems])
st$winnerrep <- as.character(reps[st$maxreps])
}
View(st)
# housekeeping (remove useless columns)
st <- st %>% select(-maxdems, -maxreps, -indexdems, -indexreps)
# Add 2015 population estimates and Counties labels
pop <- read.csv("pop/pop2015.csv")
pop$fip <- as.character(pop$fip)
st.pop <- inner_join(st, pop, by = "fip")
# Export data to csv file
write.csv(st.pop, "map/counties.csv", row.names = FALSE)
View(rep.cc)
View(st.pop)
rep.st.ratio <- rep.cc %>% select(State, pop_vote, del_sent)
View(rep.st.ratio)
rep.st.ratio <- rep.cc %>% select(State, pop_vote, del_sent) %>% mutate(ratio = del_sent/pop_vote)
View(rep.st.ratio)
options( scipen=999)
View(rep.st.ratio)
rep.st.ratio <- rep.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(ratio = del_sent/pop_vote) %>%
select(State, ratio)
View(rep.st.ratio)
?rename
rep.st.ratio <- rep.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(ratio = del_sent/pop_vote) %>%
select(state = State, ratio)
View(rep.st.ratio)
merge(st.pop, rep.st.ratio, by = "state")
st.rep <- merge(st.pop, rep.st.ratio, by = "state")
View(st.rep)
st.rep <- st.rep %>% mutate(ratio_county_pop = respop72015*ratio)
View(st.rep)
# Export data to csv file
write.csv(st.rep, "map/counties2.csv", row.names = FALSE)
max(st.rep$ratio_county_pop)
View(st)
# Bind States's data
# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns
st <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)
#st.cl <- st %>% select(fip, as.numeric(H.Clinton))
# find the winner
## for each row, find the index of the column with max value
### for the dems
dems <- names(st[2:3])
reps <- names(st[4:7])
st$maxdems <- as.numeric(apply(st[2:3], 1, which.max))
st$maxreps <- as.numeric(apply(st[4:7], 1, which.max))
st <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value
for (j in 1:length(st$fip)) {
# get the max value (the number of votes obtained by the winner)
st$winnerdem_votes[j] <- as.numeric(st[j,st$indexdems[j]])
st$winnerrep_votes[j] <- as.numeric(st[j,st$indexreps[j]])
# get the name of the winner
st$winnerdem <- as.character(dems[st$maxdems])
st$winnerrep <- as.character(reps[st$maxreps])
}
View(st)
# housekeeping (remove useless columns)
st <- st %>% select(-maxdems, -maxreps, -indexdems, -indexreps)
# Add 2015 population estimates and Counties labels
pop <- read.csv("pop/pop2015.csv")
pop$fip <- as.character(pop$fip)
st.pop <- inner_join(st, pop, by = "fip")
## CALCULATE RATIO VOTES/DELEGATES ## REPRESENTATIVITY ##
rep.st.ratio <- rep.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(ratio = del_sent/pop_vote) %>%
select(state = State, ratio)
st.rep <- merge(st.pop, rep.st.ratio, by = "state")
View(st.rep)
st.rep <- st.rep %>% mutate(ratio_county_pop = winnerrep_votes*ratio)
st.rep <- st.rep %>% mutate(ratio_county = winnerrep_votes*ratio)
max(st.rep$ratio_county_pop)
# Export data to csv file
write.csv(st.rep, "map/counties2.csv", row.names = FALSE)
st.rep <- st.rep %>% mutate(ratio_county = winnerrep_votes*ratio,
ratio_county_pop = respop72015*ratio)
max(st.rep$ratio_county_pop)
# Export data to csv file
write.csv(st.rep, "map/counties2.csv", row.names = FALSE)
View(st.rep)
max(st.rep$winnerrep_votes)
str(st.rep$ratio_county)
options( scipen=999
View(st.rep)
options( scipen=999)
View(st.rep)
st.rep <- st.rep %>% mutate(ratio_county_rep = winnerrep_votes*ratio,
ratio_county_pop = respop72015*ratio)
max(st.rep$ratio_county_pop)
# Export data to csv file
write.csv(st.rep, "map/counties.csv", row.names = FALSE)
View(st.rep)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
library(jsonlite)
library(tidyr)
library(XML)
library(RCurl)
library(taRifx)
# Bind States's data
# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns
st <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)
#st.cl <- st %>% select(fip, as.numeric(H.Clinton))
# find the winner
## for each row, find the index of the column with max value
### for the dems
dems <- names(st[2:3])
reps <- names(st[4:7])
st$maxdems <- as.numeric(apply(st[2:3], 1, which.max))
st$maxreps <- as.numeric(apply(st[4:7], 1, which.max))
st <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value
for (j in 1:length(st$fip)) {
# get the max value (the number of votes obtained by the winner)
st$winnerdem_votes[j] <- as.numeric(st[j,st$indexdems[j]])
st$winnerrep_votes[j] <- as.numeric(st[j,st$indexreps[j]])
# get the name of the winner
st$winnerdem <- as.character(dems[st$maxdems])
st$winnerrep <- as.character(reps[st$maxreps])
}
# housekeeping (remove useless columns)
st <- st %>% select(-maxdems, -maxreps, -indexdems, -indexreps)
# Add 2015 population estimates and Counties labels
pop <- read.csv("pop/pop2015.csv")
pop$fip <- as.character(pop$fip)
st.pop <- inner_join(st, pop, by = "fip")
## CALCULATE RATIO VOTES/DELEGATES ## REPRESENTATIVITY ##
rep.st.ratio <- rep.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(ratio = del_sent/pop_vote) %>%
select(state = State, ratio)
st.rep <- merge(st.pop, rep.st.ratio, by = "state")
st.rep <- st.rep %>% mutate(ratio_county_rep = winnerrep_votes*ratio,
ratio_county_pop = respop72015*ratio)
max(st.rep$ratio_county_pop)
# Export data to csv file
write.csv(st.rep, "map/counties.csv", row.names = FALSE)
# END ##############################################################
View(st.rep)
# Bind States's data
# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns
st <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)
#st.cl <- st %>% select(fip, as.numeric(H.Clinton))
View(st)
# find the winner
## for each row, find the index of the column with max value
### for the dems
dems <- names(st[2:3])
reps <- names(st[4:7])
st$maxdems <- as.numeric(apply(st[2:3], 1, which.max))
st$maxreps <- as.numeric(apply(st[4:7], 1, which.max))
st <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value
for (j in 1:length(st$fip)) {
# get the max value (the number of votes obtained by the winner)
st$winnerdem_votes[j] <- as.numeric(st[j,st$indexdems[j]])
st$winnerrep_votes[j] <- as.numeric(st[j,st$indexreps[j]])
# get the name of the winner
st$winnerdem <- as.character(dems[st$maxdems])
st$winnerrep <- as.character(reps[st$maxreps])
}
# housekeeping (remove useless columns)
st <- st %>% select(-maxdems, -maxreps, -indexdems, -indexreps)
View(st)
# Add 2015 population estimates and Counties labels
pop <- read.csv("pop/pop2015.csv")
pop$fip <- as.character(pop$fip)
View(pop)
st.pop <- inner_join(st, pop, by = "fip")
View(st.pop)
dem <- read.csv("democrats.csv")
popVote_dem <- 16297485
delSent_dem <- 2324
View(dem)
dem <- dem %>% mutate(pop_vote = Clinton+Sanders,
del_sent =Clinton_del+Sanders_del) %>%
mutate(PClinton = Clinton/pop_vote,
PSanders = Sanders/pop_vote,
PDClinton = Clinton_del/del_sent,
PDSanders = Sanders_del/del_sent) %>%
mutate(del_prop = (pop_vote/popVote_dem)*delSent_dem) %>% # Number of delegate for each State if
# delegates were allocated proportionally
# the to number of votes
mutate(Clinton_del_if = del_prop*PClinton,
Sanders_del_if = del_prop*PSanders)# Number of delegates each candidate
# would get if delegates were allocated
# proportionally to the number of votes
View(dem)
View(rep)
dem <- dem[-1,] # remove the row "total"
dem.cc <- dem[complete.cases(dem), ]
sum(dem.cc$del_sent)
# EXPORT DATA FOR THE BERTIN MATRIX #
names <- c("state", "ansi_code", "votes", "delegates")
# Real number of delegates
chart.clinton <- dem.cc %>% select(State, ansi_code, Clinton, Clinton_del)
names(chart.clinton) <- names
write.csv(chart.clinton, "charts/clinton.csv", row.names = FALSE)
chart.sanders <- dem.cc %>% select(State, ansi_code, Sanders, Sanders_del)
names(chart.sanders) <- names
write.csv(chart.sanders, "charts/sanders.csv", row.names = FALSE)
# 'If' number of delegates ####
chart.clinton.if <- dem.cc %>% select(State, ansi_code, Clinton, Clinton_del_if)
names(chart.clinton.if) <- names
write.csv(chart.clinton.if, "charts/clinton_if.csv", row.names = FALSE)
chart.sanders.if <- dem.cc %>% select(State, ansi_code, Sanders, Sanders_del_if)
names(chart.sanders.if) <- names
write.csv(chart.sanders.if, "charts/sanders_if.csv", row.names = FALSE)
# To get States codes
#write.csv(rep.cc$ansi_code, "states_ansi.csv", row.names = FALSE)
states_ansi <- c("19","33","45","32","1","2","5","13","25","27","40","47","48","50","51","20","21","22","23","15","16","26","28","11","12","17","29","37","39","4","49")
states <- dem.cc %>% select(State)
write.csv(states, "states.csv", row.names = FALSE)
states <- c("IA", "NH", "SC", "NV", "AL", "AK", "AR", "GA", "MA", "MN", "OK", "TN", "TX", "VT", "VA", "KS", "KY", "LA", "ME", "HI", "ID", "MI", "MS", "DC", "FL", "IL", "MO", "NC", "OH", "AZ", "UT")
# EXPORT DATA FOR THE STACKED CHART (CUMULATIVE) #
Namen <- c("state", "x", "y")
li <- list()
# Real numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del, Sanders_del)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li)
write(stack, "stacked/dem_stacked.json")
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- rep.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li)
write(stack, "stacked/dem_stacked_if.json")
View(dem.cc)
## CALCULATE RATIO VOTES/DELEGATES ## REPRESENTATIVITY ##
# Score for each State: Republicans
st.ratio.rep <- rep.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(st_ratio_rep = del_sent/pop_vote) %>%
select(state = State, st_ratio_rep)
# Score for each State: Democrats
st.ratio.dem <- dem.cc %>%
select(State, pop_vote, del_sent) %>%
mutate(st_ratio_dem = del_sent/pop_vote) %>%
select(state = State, st_ratio_dem)
st.ratio <- merge(st.pop, st.ratio.rep, st.ratio.dem, by = "state")
?merge
st.ratio <- merge(st.ratio.rep, st.ratio.dem, by = "state")
View(st.ratio)
st.ratio.pop <- merge(st.pop, st.ratio, by = "state")
View(st.ratio.pop)
st.ratio.pop <- st.ratio.pop %>% mutate(ratio_county_rep = winnerrep_votes*st_ratio_rep,
ratio_county_dem = winnerdem_votes*st_ratio_dem,
ratio_county_rep_pop = respop72015*st_ratio_rep,
ratio_county_dem_pop = respop72015*st_ratio_dem)
View(st.ratio.pop)
write.csv(st.ratio.pop, "map/counties.csv", row.names = FALSE)
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked.json")
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- rep.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked_if.json")
# Real numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del, Sanders_del)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked.json")
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- rep.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked_if.json")
# EXPORT DATA FOR THE STACKED CHART (CUMULATIVE) #
Namen <- c("state", "x", "y")
li <- list()
# Real numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del, Sanders_del)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked.json")
# reinitiate list
li <- list()
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked_if.json")
states_dem <- dem.cc %>% select(ansi_code)
write.csv(states_dem, "states_dem.csv", row.names = FALSE)
states_ansi <- c("33","45","1","5","8","13","25","27","40","47","48","50","51","20","22","31","26","28","12","17","29","37","39","4","16","49","15","55","56")
# EXPORT DATA FOR THE STACKED CHART (CUMULATIVE) #
Namen <- c("state", "x", "y")
li <- list()
# Real numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del, Sanders_del)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked.json")
# reinitiate list
li <- list()
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked_if.json")
dem <- read.csv("democrats.csv")
popVote_dem <- 16297485
#delSent_dem <- 2324
delSent_dem <- 2824
dem <- dem %>% mutate(pop_vote = Clinton+Sanders,
del_sent =Clinton_del+Sanders_del) %>%
mutate(PClinton = Clinton/pop_vote,
PSanders = Sanders/pop_vote,
PDClinton = Clinton_del/del_sent,
PDSanders = Sanders_del/del_sent) %>%
mutate(del_prop = (pop_vote/popVote_dem)*delSent_dem) %>% # Number of delegate for each State if
# delegates were allocated proportionally
# the to number of votes
mutate(Clinton_del_if = del_prop*PClinton,
Sanders_del_if = del_prop*PSanders)# Number of delegates each candidate
# would get if delegates were allocated
# proportionally to the number of votes
dem <- dem[-1,] # remove the row "total"
dem.cc <- dem[complete.cases(dem), ]
sum(dem.cc$del_sent)
# EXPORT DATA FOR THE BERTIN MATRIX #
names <- c("state", "ansi_code", "votes", "delegates")
# Real number of delegates
chart.clinton <- dem.cc %>% select(State, ansi_code, Clinton, Clinton_del)
names(chart.clinton) <- names
write.csv(chart.clinton, "charts/clinton.csv", row.names = FALSE)
chart.sanders <- dem.cc %>% select(State, ansi_code, Sanders, Sanders_del)
names(chart.sanders) <- names
write.csv(chart.sanders, "charts/sanders.csv", row.names = FALSE)
# 'If' number of delegates ####
chart.clinton.if <- dem.cc %>% select(State, ansi_code, Clinton, Clinton_del_if)
names(chart.clinton.if) <- names
write.csv(chart.clinton.if, "charts/clinton_if.csv", row.names = FALSE)
chart.sanders.if <- dem.cc %>% select(State, ansi_code, Sanders, Sanders_del_if)
names(chart.sanders.if) <- names
write.csv(chart.sanders.if, "charts/sanders_if.csv", row.names = FALSE)
# To get States codes
#write.csv(rep.cc$ansi_code, "states_ansi.csv", row.names = FALSE)
states_dem <- dem.cc %>% select(ansi_code)
write.csv(states_dem, "states_dem.csv", row.names = FALSE)
#states <- c("IA", "NH", "SC", "NV", "AL", "AK", "AR", "GA", "MA", "MN", "OK", "TN", "TX", "VT", "VA", "KS", "KY", "LA", "ME", "HI", "ID", "MI", "MS", "DC", "FL", "IL", "MO", "NC", "OH", "AZ", "UT")
states_ansi <- c("33","45","1","5","8","13","25","27","40","47","48","50","51","20","22","31","26","28","12","17","29","37","39","4","16","49","15","55","56")
# EXPORT DATA FOR THE STACKED CHART (CUMULATIVE) #
Namen <- c("state", "x", "y")
li <- list()
# Real numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del, Sanders_del)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked.json")
# reinitiate list
li <- list()
# What if numbers
dem.del.count <- dem.cc %>% select(ansi_code, Clinton_del_if, Sanders_del_if)
noms <- c("State", "Clinton", "Sanders")
names(dem.del.count) <- noms
for (st in 1:length(states_ansi)) {
del.st <- dem.del.count %>% filter(State == states_ansi[st])
del.st.melted <- del.st %>% melt(id = c("State"))
names(del.st.melted) <- Namen
#del.st.melted$State <- NULL
li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array
#forjson[st, 1] <- toJSON(del.st.melted)
}
stack <- toJSON(li, pretty=TRUE)
write(stack, "stacked/dem_stacked_if.json")

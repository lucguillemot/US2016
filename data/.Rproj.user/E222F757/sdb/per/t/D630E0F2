{
    "contents" : "library(plyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(jsonlite)\nlibrary(tidyr)\nlibrary(XML)\nlibrary(RCurl)\nlibrary(taRifx)\n\n##############################################################\n\n# Function to parse xml files downloaded from politico.com\nparse_xml_states <- function(state) {\n  \n  url <- paste(state, \".xml\", sep = \"\")\n  doc <- xmlTreeParse(url, useInternal = TRUE)\n  \n  thisstate <- data.frame()\n  ids <- unlist(doc[\"//article/@id\"], use.names = FALSE)\n  #fips <- unlist(doc[\"//article/@data-fips\"], use.names = FALSE) # unused\n  \n  for (i in 1:length(ids)) {\n    #i <- 2\n    id <- unlist(doc[paste(\"//article[\", i, \"]/@id\")], use.names = FALSE)\n    fip <- unlist(doc[paste(\"//article[\", i, \"]/@data-fips\")], use.names = FALSE)\n    candidates <- gsub(\"[[:space:]]\", \"\", xpathSApply(doc, paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/th\"), xmlValue))\n    pc <- xpathSApply(doc, paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/td[@class='results-percentage']\"), xmlValue)\n    votes <- as.numeric( # converts to numbers\n      gsub(\",\", \"\", # gsub used to remove commas\n           xpathSApply(doc, \n                       paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/td[@class='results-popular']\"), \n                       xmlValue)))\n    thisstate <- rbind(thisstate,(cbind(fip, id, candidates, pc, votes)))\n  }\n  \n  unique(thisstate$fip)\n  thisstate$pc <- NULL\n  thisstate$id <- NULL\n  \n  # remove \"Uncommitted\" and other 'candidate' values leading to erros (duplicate names)\n  thisstate <- thisstate %>% \n    filter(candidates != \"Uncommitted\") %>% \n    filter(candidates != \"NoPreference\") %>%\n    filter(candidates != \"TotalWrite-ins\")\n  \n  # From long to wide format\n  thisstate.spreaded <- spread(thisstate, candidates, votes)\n  \n  # Select columns of still-running candidates + Rubio\n  # and add State column\n  thisstate.spreaded <- thisstate.spreaded %>% \n    select(fip, matches(\"H.Clinton\"), matches(\"B.Sanders\"), matches(\"D.Trump\"), matches(\"T.Cruz\"), matches(\"M.Rubio\"), matches(\"J.Kasich\")) %>% \n    mutate(state = state)\n\n  thisstate.spreaded\n}\n\n# IOWA missing from Politico data\nstates <- c(\"NH\", \"SC\", \"NV\", \"AL\", \"AK\", \"AR\", \"GA\", \"MA\", \"MN\", \"OK\", \"TN\", \"TX\", \"VT\", \"VA\", \"KS\", \"KY\", \"LA\", \"ME\", \"HI\", \"ID\", \"MI\", \"MS\", \"DC\", \"FL\", \"IL\", \"MO\", \"NC\", \"OH\", \"AZ\", \"UT\")\n\n# Get States data (creates a dataframe for each States with data)\nfor (i in 1:length(states)) {\n  this <- states[i]\n  assign(this, parse_xml_states(states[i]))\n  print(states[i]) # Check if States is ok\n}\n\n# Calculates totals // NOT WORKING !!\n#st.sp.cv <- japply(thisstate.spreaded, which(sapply(thisstate.spreaded, class)==\"character\"), as.numeric )\n#st <- thisstate.spreaded %>% mutate(sum = rowSums(.[2:12]))\n\n# Bind States's data\n# bind_rows (from dplyr) allows to rbind datafames with uneven number of columns\nst <- bind_rows(NH, SC, NV, AL, AK, AR, GA, MA, MN, OK, TN, TX, VT, VA, KS, KY, LA, ME, HI, ID, MI, MS, DC, FL, IL, MO, NC, OH, AZ, UT)\n#st.cl <- st %>% select(fip, as.numeric(H.Clinton))\n\n# find the winner\n## for each row, find the index of the column with max value\n### for the dems\ndems <- names(st[2:3])\nreps <- names(st[4:7])\nst$maxdems <- as.numeric(apply(st[2:3], 1, which.max))\nst$maxreps <- as.numeric(apply(st[4:7], 1, which.max))\n\nst <- st %>% mutate(indexdems = maxdems + 1, indexreps = maxreps + 3) # Column index of the label of the max value\n\nfor (j in 1:length(st$fip)) {\n  # get the max value (the number of votes obtained by the winner)\n  st$winnerdem_votes[j] <- as.numeric(st[j,st$indexdems[j]])\n  st$winnerrep_votes[j] <- as.numeric(st[j,st$indexreps[j]])\n  # get the name of the winner\n  st$winnerdem <- as.character(dems[st$maxdems])\n  st$winnerrep <- as.character(reps[st$maxreps])\n}\n\n# housekeeping (remove useless columns)\nst <- st %>% select(-maxdems, -maxreps, -indexdems, -indexreps)\n  \n# Export data to csv file\nwrite.csv(st, \"local.csv\", row.names = FALSE)\n\n# END ##############################################################",
    "created" : 1460175433355.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1698225815",
    "id" : "D630E0F2",
    "lastKnownWriteTime" : 1460257780,
    "path" : "~/Documents/research/postdoc/US2016/data/local/xml_scraper.R",
    "project_path" : "data/local/xml_scraper.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}
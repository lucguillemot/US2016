{
    "contents" : "library(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(jsonlite)\nlibrary(tidyr)\nrep <- read.csv(\"data/rep.csv\")\npopVote <- 19783685\nrep <- rep %>% mutate(pop_vote = Trump+Cruz+Rubio+Kasich, \n                      del_sent =Trump_del+Cruz_del+Rubio_Del+Kasich_del) %>%\n  mutate(PTrump = Trump/pop_vote, \n         PCruz = Cruz/pop_vote,\n         PRubio = Rubio/pop_vote,\n         PKasich = Kasich/pop_vote,\n         PDTrump = Trump_del/del_sent, \n         PDCruz = Cruz_del/del_sent,\n         PDRubio = Rubio_Del/del_sent,\n         PDKasich = Kasich_del/del_sent) %>%\n  mutate(del_prop = (pop_vote/popVote)*2472)\n\nrep <- rep[-1,] # remove the row \"total\"\n\nrep.cc <- rep[complete.cases(rep), ]\n\n# PLAY WITH R CHARTS TO PEEK INTO DATA #\n# popVote <- sum(rep$pop_vote, na.rm = TRUE)\ndelTot <- sum(rep[, 9:12], na.rm = TRUE)\n\nplot(rep$Delegates, rep$pop_vote)\n\nggplot(rep.cc, aes(pop_vote, del_prop))+\n  geom_point(colour=\"red\")+\n  geom_text(aes(label=State), hjust=-.2, vjust =-.2, size = 3)+\n  #theme(axis.text=element_text(size=8))+\n  geom_smooth(method='lm')\n\ng <- ggplot(rep.cc)+\n  geom_point(aes(x = pop_vote, y = del_prop, color = \"red\"))+\n  geom_point(aes(x = pop_vote, y = del_sent, color = \"darkblue\"))+\n  geom_text(aes(x = pop_vote, y = del_prop, color = \"red\", label = State), hjust=-.2, vjust =-.2, size = 3)\n  \n#rep.melt <- melt(rep.cc, id.vars=\"State\", value.name=\"value\", variable.name=\"Year\")\n\nggplot(rep, aes(State, del_sent)) + \n  geom_line()#+\n  geom_line(aes(y = pop_vote, colour = \"Share of votes\"))\n\nrep.tots <- rep %>% select(del_sent, pop_vote)\n#counts <- table(rep.cc$del_sent)\nbarplot(rep.cc$pop_vote/rep.cc$del_sent, main=\"Share of votes and Share of delegates\",\n        xlab=\"Share\", col=c(\"darkblue\"),\n        legend = rep$State) #, beside=TRUE\n\n# EXPORT DATA FOR THE BERTIN MATRIX #\nrep.chart <- rep.cc %>% select(ansi_code, State, winner, PTrump, PCruz, PRubio, PKasich)\nwrite.csv(rep.cc, \"data/rep.cc.csv\", row.names = FALSE)\n\nwhich.max(rep.cc$Trump)\nwhich.max(rep.cc$Trump_del)\nnames <- c(\"state\", \"ansi_code\", \"votes\", \"delegates\")\n\nchart.trump <- rep.cc %>% select(State, ansi_code, Trump, Trump_del)\nnames(chart.trump) <- names\nwrite.csv(chart.trump, \"data/trump.csv\", row.names = FALSE)\n\nchart.cruz <- rep.cc %>% select(State, ansi_code, Cruz, Cruz_del)\nnames(chart.cruz) <- names\nwrite.csv(chart.cruz, \"data/cruz.csv\", row.names = FALSE)\n\nchart.rubio <- rep.cc %>% select(State, ansi_code, Rubio, Rubio_Del)\nnames(chart.rubio) <- names\nwrite.csv(chart.rubio, \"data/rubio.csv\", row.names = FALSE)\n\nchart.kasich <- rep.cc %>% select(State, ansi_code, Kasich, Kasich_del)\nnames(chart.kasich) <- names\nwrite.csv(chart.kasich, \"data/kasich.csv\", row.names = FALSE)\n\n# To get States codes\nwrite.csv(rep.cc$ansi_code, \"data/states_ansi.csv\", row.names = FALSE)\nstates_ansi <- c(\"19\",\"33\",\"45\",\"32\",\"1\",\"2\",\"5\",\"13\",\"25\",\"27\",\"40\",\"47\",\"48\",\"50\",\"51\",\"20\",\"21\",\"22\",\"23\",\"15\",\"16\",\"26\",\"28\",\"11\",\"12\",\"17\",\"29\",\"37\",\"39\",\"4\",\"49\")\n\nstates <- rep.cc %>% select(State)\nwrite.csv(states, \"data/states.csv\", row.names = FALSE)\nstates <- c(\"IA\", \"NH\", \"SC\", \"NV\", \"AL\", \"AK\", \"AR\", \"GA\", \"MA\", \"MN\", \"OK\", \"TN\", \"TX\", \"VT\", \"VA\", \"KS\", \"KY\", \"LA\", \"ME\", \"HI\", \"ID\", \"MI\", \"MS\", \"DC\", \"FL\", \"IL\", \"MO\", \"NC\", \"OH\", \"AZ\", \"UT\")\n\n# Export data for the stacked chart (cumulative) #\nNamen <- c(\"state\", \"x\", \"y\")\niterations <- 31\nvariables <- 1\nforjson <- matrix(ncol=variables, nrow=iterations)\nli <- list()\n\nrep.del.count <- rep.cc %>% select(ansi_code, Trump_del, Cruz_del, Rubio_Del, Kasich_del)\nnoms <- c(\"State\", \"Trump\", \"Cruz\", \"Rubio\", \"Kasich\")\nnames(rep.del.count) <- noms\n\nfor (st in 1:length(states_ansi)) {\n  del.st <- rep.del.count %>% filter(State == states_ansi[st])\n  del.st.melted <- del.st %>% melt(id = c(\"State\"))\n  names(del.st.melted) <- Namen\n  #del.st.melted$State <- NULL\n  \n  li[[st]] <- del.st.melted # Creates a list of dataframe, each will become a json array\n  #forjson[st, 1] <- toJSON(del.st.melted)\n}\n\nstack <- toJSON(li)\nwrite(stack, \"data/rep_stacked.json\")\n",
    "created" : 1459886211588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3061787282",
    "id" : "5AAD7DAE",
    "lastKnownWriteTime" : 1460166865,
    "path" : "~/Documents/research/postdoc/US2016/US2016.R",
    "project_path" : "US2016.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}
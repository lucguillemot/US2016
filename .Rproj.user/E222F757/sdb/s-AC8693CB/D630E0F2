{
    "contents" : "library(plyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(jsonlite)\nlibrary(tidyr)\nlibrary(XML)\nlibrary(RCurl)\n\n\nurl <- \"kansas.xml\"\ndoc <- xmlTreeParse(url, useInternal = TRUE)\nstr(doc)\ntop <- xmlRoot(doc)\nstr(top)\nxmlName(top)\nnames(top[2][[1]])\n\nart <- top[[2]]\nxmlValue(art[[1]])\n\nxmlSApply(art[[1]], xmlValue)\n\nxmlValue(art)\nxmlSApply(art, function(x) xmlSApply(x, xmlValue))\n\n# XPath\nnames(top)\nnodes <- getNodeSet(top, \"//article\")\n\nxmlValue(doc[[\"//table\"]])\n\n###################\n# test from html\ntheurl <- \"http://www.politico.com/2016-election/results/map/president/kansas\"\nwebpage <- getURL(theurl)\nwebpage <- readLines(tc <- textConnection(webpage)); close(tc)\n\npagetree <- htmlTreeParse(webpage, error=function(...){}, useInternalNodes = TRUE)\n\n# Extract table header and contents\ntablehead <- xpathSApply(pagetree, \"//*/table[@class='results-table']/tbody/tr/th\", xmlValue)\nresults <- xpathSApply(pagetree, \"//*/table[@class='results-table']/tbody/tr/th/td/span/span\", xmlValue)\n\ntablehead <- xpathSApply(pagetree, \"//*/table[@class='results-table']/tbody/tr/th\", xmlValue)\ncandidates <- xpathSApply(pagetree, \"//*/th[@class='results-name']\", xmlValue)\nPCresults <- xpathSApply(pagetree, \"//*/td[@class='results-percentage']\", xmlValue)\nvotes_results  <- xpathSApply(pagetree, \"//*/td[@class='results-popular']\", xmlValue)\n\n# Convert character vector to dataframe\ncontent <- as.data.frame(matrix(PCresults, ncol = 1, byrow = TRUE))\ncandidates_content <- as.data.frame(matrix(candidates, ncol = 1, byrow = TRUE))\nkansas <- cbind(content, candidates_content)\n\ntablehead\nresults\n\n\nc <- xpathSApply(pagetree, \"//*/article[@class='results-group']@id\", xmlValue)\n#ids <- as.data.frame(toString(pagetree[\"//*/article[@class='results-group']/@id\"]))\nids <- pagetree[\"//*/article[@class='results-group']/@id\"]\n\nas.data.frame(ids)\n\ndata <- htmlTreeParse(theurl)\ndata\n\n\ndf <- data.frame(id = data[\"//*/article[@class='results-group']/@id\"])\n\n\n##############################################################\n##############################################################\n##############################################################\n###########\n# try again with downloaded xml file #\nurl <- \"kansas.xml\"\ndoc <- xmlTreeParse(url, useInternal = TRUE)\n\nthisstate <- data.frame()\nids <- unlist(doc[\"//article/@id\"], use.names = FALSE)\n#fips <- unlist(doc[\"//article/@data-fips\"], use.names = FALSE)\n\nfor (i in 1:length(ids)) {\n  #i <- 2\n  id <- unlist(doc[paste(\"//article[\", i, \"]/@id\")], use.names = FALSE)\n  fip <- unlist(doc[paste(\"//article[\", i, \"]/@data-fips\")], use.names = FALSE)\n  candidates <- xpathSApply(doc, paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/th\"), xmlValue)\n  pc <- xpathSApply(doc, paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/td[@class='results-percentage']\"), xmlValue)\n  votes <- xpathSApply(doc, paste(\"//article[\", i, \"]/div/div/div/table/tbody/tr/td[@class='results-popular']\"), xmlValue)\n  thisstate <- rbind(thisstate,(cbind(fip, id, candidates, pc, votes)))\n}\n##############################################################\n##############################################################\n##############################################################",
    "created" : 1460175433355.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3885033424",
    "id" : "D630E0F2",
    "lastKnownWriteTime" : 1460227750,
    "path" : "~/Documents/research/postdoc/US2016/data/local/xml_scraper.R",
    "project_path" : "data/local/xml_scraper.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}